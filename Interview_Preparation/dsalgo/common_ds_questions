1)Implementing a Linked List - > https://www.geeksforgeeks.org/linked-list-set-1-introduction/

sol -> I want to implement it (can do it)



2) Find the length of the linked list iterative and Recursive -> https://www.geeksforgeeks.org/find-length-of-a-linked-list-iterative-and-recursive/

Solution -> Given in the same link but want to implement it myself.


3)Swap nodes in a linked list without swapping data ->  https://www.geeksforgeeks.org/swap-nodes-in-a-linked-list-without-swapping-data/

Solution -> will implement myself

4)Reverse a LinkedList -> https://www.geeksforgeeks.org/reverse-a-linked-list/

Solution : will implement myself

5)Merge two sorted linked lists -> https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/

Solution -> to be implemented by myself

6)Rotate a Linked List -> https://www.geeksforgeeks.org/rotate-a-linked-list/

Solution -> to be implemmented by myself

7)The Great Tree-List Recursion Problem -> https://www.geeksforgeeks.org/the-great-tree-list-recursion-problem/

Solution -> not given

8)QuickSort on Doubly Linked List -> https://www.geeksforgeeks.org/quicksort-for-linked-list/

Solution ->  // A Java program to sort a linked list using Quicksort 
class QuickSort_using_Doubly_LinkedList{ 
    Node head; 
    
/* a node of the doubly linked list */  
    static class Node{ 
        private int data; 
        private Node next; 
        private Node prev; 
          
        Node(int d){ 
            data = d; 
            next = null; 
            prev = null; 
        } 
    } 
      
// A utility function to find last node of linked list     
    Node lastNode(Node node){ 
        while(node.next!=null) 
            node = node.next; 
        return node; 
    } 
      
  
/* Considers last element as pivot, places the pivot element at its 
   correct position in sorted array, and places all smaller (smaller than 
   pivot) to left of pivot and all greater elements to right of pivot */
    Node partition(Node l,Node h) 
    { 
       // set pivot as h element 
        int x = h.data; 
          
        // similar to i = l-1 for array implementation 
        Node i = l.prev; 
          
        // Similar to "for (int j = l; j <= h- 1; j++)" 
        for(Node j=l; j!=h; j=j.next) 
        { 
            if(j.data <= x) 
            { 
                // Similar to i++ for array 
                i = (i==null) ? l : i.next; 
                int temp = i.data; 
                i.data = j.data; 
                j.data = temp; 
            } 
        } 
        i = (i==null) ? l : i.next;  // Similar to i++ 
        int temp = i.data; 
        i.data = h.data; 
        h.data = temp; 
        return i; 
    } 
      
    /* A recursive implementation of quicksort for linked list */
    void _quickSort(Node l,Node h) 
    { 
        if(h!=null && l!=h && l!=h.next){ 
            Node temp = partition(l,h); 
            _quickSort(l,temp.prev); 
            _quickSort(temp.next,h); 
        } 
    } 
      
    // The main function to sort a linked list. It mainly calls _quickSort() 
    public void quickSort(Node node) 
    { 
        // Find last node 
        Node head = lastNode(node); 
          
        // Call the recursive QuickSort 
        _quickSort(node,head); 
    } 
      
     // A utility function to print contents of arr 
     public void printList(Node head) 
     { 
        while(head!=null){ 
            System.out.print(head.data+" "); 
            head = head.next; 
        } 
    } 
      
    /* Function to insert a node at the beginging of the Doubly Linked List */
    void push(int new_Data) 
    { 
        Node new_Node = new Node(new_Data);     /* allocate node */
          
        // if head is null, head = new_Node 
        if(head==null){ 
            head = new_Node; 
            return; 
        } 
          
        /* link the old list off the new node */
        new_Node.next = head; 
          
        /* change prev of head node to new node */
        head.prev = new_Node; 
          
        /* since we are adding at the begining, prev is always NULL */
        new_Node.prev = null; 
          
        /* move the head to point to the new node */
        head = new_Node; 
    } 
      
    /* Driver program to test above function */
    public static void main(String[] args){ 
            QuickSort_using_Doubly_LinkedList list = new QuickSort_using_Doubly_LinkedList(); 
              
              
            list.push(5); 
            list.push(20); 
            list.push(4); 
            list.push(3); 
            list.push(30); 
            
              
            System.out.println("Linked List before sorting "); 
            list.printList(list.head); 
            System.out.println("\nLinked List after sorting"); 
            list.quickSort(list.head); 
            list.printList(list.head); 
          
    } 
} 



9)Merge Sort for Doubly Linked List -> https://www.geeksforgeeks.org/merge-sort-for-doubly-linked-list/

Solution -> // Java program to implement merge sort in singly linked list 
  
// Linked List Class 
class LinkedList { 
  
    static Node head;  // head of list 
  
    /* Node Class */
    static class Node { 
  
        int data; 
        Node next, prev; 
  
        // Constructor to create a new node 
        Node(int d) { 
            data = d; 
            next = prev = null; 
        } 
    } 
  
    void print(Node node) { 
        Node temp = node; 
        System.out.println("Forward Traversal using next pointer"); 
        while (node != null) { 
            System.out.print(node.data + " "); 
            temp = node; 
            node = node.next; 
        } 
        System.out.println("\nBackward Traversal using prev pointer"); 
        while (temp != null) { 
            System.out.print(temp.data + " "); 
            temp = temp.prev; 
        } 
    } 
  
    // Split a doubly linked list (DLL) into 2 DLLs of 
    // half sizes 
    Node split(Node head) { 
        Node fast = head, slow = head; 
        while (fast.next != null && fast.next.next != null) { 
            fast = fast.next.next; 
            slow = slow.next; 
        } 
        Node temp = slow.next; 
        slow.next = null; 
        return temp; 
    } 
  
    Node mergeSort(Node node) { 
        if (node == null || node.next == null) { 
            return node; 
        } 
        Node second = split(node); 
  
        // Recur for left and right halves 
        node = mergeSort(node); 
        second = mergeSort(second); 
  
        // Merge the two sorted halves 
        return merge(node, second); 
    } 
  
    // Function to merge two linked lists 
    Node merge(Node first, Node second) { 
        // If first linked list is empty 
        if (first == null) { 
            return second; 
        } 
  
        // If second linked list is empty 
        if (second == null) { 
            return first; 
        } 
  
        // Pick the smaller value 
        if (first.data < second.data) { 
            first.next = merge(first.next, second); 
            first.next.prev = first; 
            first.prev = null; 
            return first; 
        } else { 
            second.next = merge(first, second.next); 
            second.next.prev = second; 
            second.prev = null; 
            return second; 
        } 
    } 
  
    // Driver program to test above functions 
    public static void main(String[] args) { 
  
        LinkedList list = new LinkedList(); 
        list.head = new Node(10); 
        list.head.next = new Node(30); 
        list.head.next.next = new Node(3); 
        list.head.next.next.next = new Node(4); 
        list.head.next.next.next.next = new Node(20); 
        list.head.next.next.next.next.next = new Node(5); 
          
          
        Node node = null; 
        node = list.mergeSort(head); 
        System.out.println("Linked list after sorting :"); 
        list.print(node); 
  
    } 
} 


10) Implement two stacks in an array -> https://www.geeksforgeeks.org/implement-two-stacks-in-an-array/

Solution -> will implement myself


