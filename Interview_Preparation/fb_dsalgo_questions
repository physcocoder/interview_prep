1) https://www.geeksforgeeks.org/inplace-rotate-square-matrix-by-90-degrees/ -> nplace rotate square matrix by 90 degrees | Set 1
Given an square matrix, turn it by 90 degrees in anti-clockwise direction without using any extra space.

Examples :

Input
 1  2  3
 4  5  6
 7  8  9

Output:
 3  6  9 
 2  5  8 
 1  4  7 

Input:
 1  2  3  4 
 5  6  7  8 
 9 10 11 12 
13 14 15 16 

Output:
 4  8 12 16 
 3  7 11 15 
 2  6 10 14 
 1  5  9 13
 
 
 An approach that requires extra space is already discussed here.

How to do without extra space?
Below are some important observations.

First row of source –> First column of destination, elements filled in opposite order

Second row of source –> Second column of destination, elements filled in opposite order

so … on

Last row of source –> Last column of destination, elements filled in opposite order.

An N x N matrix will have floor(N/2) square cycles. For example, a 4 X 4 matrix will have 2 cycles. The first cycle is formed by its 1st row, last column, last row and 1st column. The second cycle is formed by 2nd row, second-last column, second-last row and 2nd column.

The idea is for each square cycle, we swap the elements involved with the corresponding cell in the matrix in anti-clockwise direction i.e. from top to left, left to bottom, bottom to right and from right to top one at a time. We use nothing but a temporary variable to achieve this.

Below steps demonstrate the idea

First Cycle (Involves Red Elements)
 1  2  3 4 
 5  6  7  8 
 9 10 11 12 
 13 14 15 16 

 
Moving first group of four elements (First
elements of 1st row, last row, 1st column 
and last column) of first cycle in counter
clockwise. 
 4  2  3 16
 5  6  7 8 
 9 10 11 12 
 1 14  15 13 
 
Moving next group of four elements of 
first cycle in counter clockwise 
 4  8  3 16 
 5  6  7  15  
 2  10 11 12 
 1  14  9 13 

Moving final group of four elements of 
first cycle in counter clockwise 
 4  8 12 16 
 3  6  7 15 
 2 10 11 14 
 1  5  9 13 


Second Cycle (Involves Blue Elements)
 4  8 12 16 
 3  6 7  15 
 2  10 11 14 
 1  5  9 13 

Fixing second cycle
 4  8 12 16 
 3  7 11 15 
 2  6 10 14 
 1  5  9 13
 
 
 Solution ->  
 # Python3 program to rotate a matrix by 90 degrees 
N = 4
  
# An Inplace function to rotate  
# N x N matrix by 90 degrees in 
# anti-clockwise direction 
def rotateMatrix(mat): 
      
    # Consider all squares one by one 
    for x in range(0, int(N/2)): 
          
        # Consider elements in group    
        # of 4 in current square 
        for y in range(x, N-x-1): 
              
            # store current cell in temp variable 
            temp = mat[x][y] 
  
            # move values from right to top 
            mat[x][y] = mat[y][N-1-x] 
  
            # move values from bottom to right 
            mat[y][N-1-x] = mat[N-1-x][N-1-y] 
  
            # move values from left to bottom 
            mat[N-1-x][N-1-y] = mat[N-1-y][x] 
  
            # assign temp to left 
            mat[N-1-y][x] = temp 
  
  
# Function to pr the matrix 
def displayMatrix( mat ): 
      
    for i in range(0, N): 
          
        for j in range(0, N): 
              
            print (mat[i][j], end = ' ') 
        print ("") 
      
      
  
  
# Driver Code 
mat = [[0 for x in range(N)] for y in range(N)] 
  
# Test case 1 
mat = [ [1, 2, 3, 4 ], 
        [5, 6, 7, 8 ], 
        [9, 10, 11, 12 ], 
        [13, 14, 15, 16 ] ] 
          
''' 
# Test case 2 
mat = [ [1, 2, 3 ], 
        [4, 5, 6 ], 
        [7, 8, 9 ] ] 
  
# Test case 3 
mat = [ [1, 2 ], 
        [4, 5 ] ] 
          
'''
  
rotateMatrix(mat) 
  
# Print rotated matrix 
displayMatrix(mat) 



2) https://www.geeksforgeeks.org/largest-subset-whose-all-elements-are-fibonacci-numbers/ - > Largest subset whose all elements are Fibonacci numbers
Given an array with positive number the task is that we find largest subset from array that contain elements which are Fibonacci numbers.

Asked in Facebook

Examples :

Input : arr[] = {1, 4, 3, 9, 10, 13, 7};
Output : subset[] = {1, 3, 13}
The output three numbers are Fibonacci
numbers.

Input  : arr[] = {0, 2, 8, 5, 2, 1, 4, 
                  13, 23};
Output : subset[] = {0, 2, 8, 5, 2, 1, 
                    13, 23}
					
					
					
A simple solution is to iterate through all elements of given array. For every number, check if it is Fibonacci or not. If yes, add it to the result.

Below is an efficient solution based on hashing.

Find max in the array
Generate Fibonacci numbers till the max and store it in hash table.
Traverse array again if the number is present in hash table then add it to the result.
filter_none



Solution -> # python3 program to find largest Fibonacci subset 
   
# Prints largest subset of an array whose 
# all elements are fibonacci numbers 
def findFibSubset(arr, n): 
  
    # Find maximum element in arr[] 
    m= max(arr) 
   
    # Generate all Fibonacci numbers till 
    # max and store them in hash. 
    a = 0
    b = 1
    hash = [] 
    hash.append(a) 
    hash.append(b) 
    while (b < m): 
      
        c = a + b 
        a = b 
        b = c 
        hash.append(b) 
      
   
    # Npw iterate through all numbers and 
    # quickly check for Fibonacci using 
    # hash. 
    for i in range (n): 
        if arr[i] in hash : 
            print( arr[i],end=" ") 
   
# Driver code 
if __name__ == "__main__": 
  
    arr = [4, 2, 8, 5, 20, 1, 40, 13, 23] 
    n = len(arr) 
    findFibSubset(arr, n)
	
	
	
3) https://www.geeksforgeeks.org/count-pairs-difference-equal-k/ - > Count all distinct pairs with difference equal to k
Given an integer array and a positive integer k, count all distinct pairs with difference equal to k.
Examples:

Input: arr[] = {1, 5, 3, 4, 2}, k = 3
Output: 2
There are 2 pairs with difference 3, the pairs are {1, 4} and {5, 2} 

Input: arr[] = {8, 12, 16, 4, 0, 20}, k = 4
Output: 5
There are 5 pairs with difference 4, the pairs are {0, 4}, {4, 8}, 
{8, 12}, {12, 16} and {16, 20} 




Solution -> * A sorting based program to count pairs with difference k*/
#include <iostream> 
#include <algorithm> 
using namespace std; 
   
/* Returns count of pairs with difference k in arr[] of size n. */
int countPairsWithDiffK(int arr[], int n, int k) 
{ 
    int count = 0; 
    sort(arr, arr+n);  // Sort array elements 
  
    int l = 0; 
    int r = 0; 
    while(r < n) 
    { 
         if(arr[r] - arr[l] == k) 
        { 
              count++; 
              l++; 
              r++; 
        } 
         else if(arr[r] - arr[l] > k) 
              l++; 
         else // arr[r] - arr[l] < sum 
              r++; 
    }    
    return count; 
} 
  
// Driver program to test above function 
int main() 
{ 
    int arr[] =  {1, 5, 3, 4, 2}; 
    int n = sizeof(arr)/sizeof(arr[0]); 
    int k = 3; 
    cout << "Count of pairs with given diff is "
         << countPairsWithDiffK(arr, n, k); 
    return 0; 
} 
Output:

Count of pairs with given diff is 2
Time Complexity: O(nlogn)



4) https://www.geeksforgeeks.org/look-and-say-sequence/ -> Look-and-Say Sequence
Find the n’th term in Look-and-say (Or Count and Say) Sequence. The look-and-say sequence is the sequence of below integers:
1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, …
How is above sequence generated?
n’th term in generated by reading (n-1)’th term.

The first term is "1"

Second term is "11", generated by reading first term as "One 1" 
(There is one 1 in previous term)

Third term is "21", generated by reading second term as "Two 1"

Fourth term is "1211", generated by reading third term as "One 2 One 1" 

and so on
How to find n’th term?
Example:

Input: n = 3
Output: 21

Input: n = 5
Output: 111221


The idea is simple, we generate all terms from 1 to n. First two terms are initialized as “1” and “11”, 
and all other terms are generated using previous terms. To generate a term using previous term, we scan the
 previous term. While scanning a term, we simply keep track of count of all consecutive characters. For sequence of same characters,
 we append the count followed by character to generate the next term.
 
 
 
 Solution -> # Python 3 program to find  
# n'th term in look and  
# say sequence 
  
# Returns n'th term in 
# look-and-say sequence 
def countnndSay(n): 
      
    # Base cases 
    if (n == 1): 
        return "1"
    if (n == 2): 
        return "11"
  
    # Find n'th term by generating  
    # all terms from 3 to n-1.  
    # Every term is generated using 
    # previous term 
      
    # Initialize previous term 
    s = "11" 
    for i in range(3, n + 1): 
          
        # In below for loop,  
        # previous character is  
        # processed in current  
        # iteration. That is why 
        # a dummy character is  
        # added to make sure that  
        # loop runs one extra iteration. 
        s += '$'
        l = len(s) 
  
        cnt = 1 # Initialize count  
                # of matching chars 
        tmp = "" # Initialize i'th  
                 # term in series 
  
        # Process previous term to 
        # find the next term 
        for j in range(1 , l): 
              
            # If current character 
            # does't match 
            if (s[j] != s[j - 1]): 
                  
                # Append count of  
                # str[j-1] to temp 
                tmp += str(cnt + 0) 
  
                # Append str[j-1] 
                tmp += s[j - 1] 
  
                # Reset count 
                cnt = 1
              
            # If matches, then increment  
            # count of matching characters 
            else: 
                cnt += 1
  
        # Update str 
        s = tmp 
    return s; 
  
# Driver Code 
N = 3
print(countnndSay(N)) 
  
# This code is contributed 
# by ChitraNayal 

Output:
21


5) Rearrange a string in sorted order followed by the integer sum
Given a string containing uppercase alphabets and integer digits (from 0 to 9), the task is to print the alphabets in the order followed by the sum of digits.

Examples:

Input : AC2BEW3
Output : ABCEW5
Alphabets in the lexicographic order 
followed by the sum of integers(2 and 3).


Implementation:
1- Start traversing the given string.
   a) If an alphabet comes increment its
      occurrence count into a hash_table.
   b) If an integer comes then store it 
      separately by summing up everytime.
2- Using hash_table append all the 
   characters first into a string and 
   then at the end, append the integers 
   sum.
3- Return the resultant string.


Solution -> class Test 
{ 
    static final int MAX_CHAR = 26; 
      
    // Method to return string in lexicographic 
    // order followed by integers sum 
    static String arrangeString(String str) 
    { 
        int char_count[] = new int[MAX_CHAR]; 
        int sum = 0; 
       
        // Traverse the string 
        for (int i = 0; i < str.length(); i++) 
        { 
            // Count occurrence of uppercase alphabets 
            if (Character.isUpperCase(str.charAt(i))) 
                char_count[str.charAt(i)-'A']++; 
       
            //Store sum of integers 
            else
                sum = sum + (str.charAt(i)-'0'); 
              
        } 
       
        String res = ""; 
       
        // Traverse for all characters A to Z 
        for (int i = 0; i < MAX_CHAR; i++) 
        { 
            char ch = (char)('A'+i); 
       
            // Append the current character 
            // in the string no. of times it 
            //  occurs in the given string 
            while (char_count[i]-- != 0) 
                res = res + ch; 
        } 
       
        // Append the sum of integers 
        if (sum > 0) 
            res = res + sum; 
       
        // return resultant string 
        return res; 
    } 
      
    // Driver method 
    public static void main(String args[])  
    { 
        String str = "ACCBA10D2EW30"; 
        System.out.println(arrangeString(str)); 
    } 
} 



6) https://www.geeksforgeeks.org/converting-roman-numerals-decimal-lying-1-3999/ -> Converting Roman Numerals to Decimal lying between 1 to 3999
Given a Romal numeral, find its corresponding decimal value.

Example :

Input : IX
Output : 9

Input : XL
Output : 40

Input : MCMIV
Output :  1904
M is a thousand, CM is nine hundred 
and IV is four
Roman numerals are based on below symbols.

SYMBOL       VALUE
I             1
IV            4
V             5
IX            9
X             10
XL            40
L             50
XC            90
C             100
CD            400
D             500
CM            900 
M             1000       
A number in Roman Numerals is a string of these symbols written in descending order(e.g. M’s first, followed by D’s, etc.). 
However, in a few specific cases, to avoid four characters being repeated in succession (such as IIII or XXXX), subtractive
 notation is often used as follows:

I placed before V or X indicates one less, so four is IV (one less than 5) and 9 is IX (one less than 10).
X placed before L or C indicates ten less, so forty is XL (10 less than 50) and 90 is XC (ten less than a hundred).
C placed before D or M indicates a hundred less, so four hundred is CD (a hundred less than five hundred)
 and nine hundred is CM (a hundred less than a thousand).
Algorithm to convert Roman Numerals to Integer Number :

Split the Roman Numeral string into Roman Symbols (character).
Convert each symbol of Roman Numerals into the value it represents.
Take symbol one by one from starting from index 0:
If current value of symbol is greater than or equal to the value of next symbol, then add this value to the running total.
else subtract this value by adding the value of next symbol to the running total.


Solution - > # Python program to convert Roman Numerals 
# to Numbers 
  
# This function returns value of each Roman symbol 
def value(r): 
    if (r == 'I'): 
        return 1
    if (r == 'V'): 
        return 5
    if (r == 'X'): 
        return 10
    if (r == 'L'): 
        return 50
    if (r == 'C'): 
        return 100
    if (r == 'D'): 
        return 500
    if (r == 'M'): 
        return 1000
    return -1
  
def romanToDecimal(str): 
    res = 0
    i = 0
  
    while (i < len(str)): 
  
        # Getting value of symbol s[i] 
        s1 = value(str[i]) 
  
        if (i+1 < len(str)): 
  
            # Getting value of symbol s[i+1] 
            s2 = value(str[i+1]) 
  
            # Comparing both values 
            if (s1 >= s2): 
  
                # Value of current symbol is greater 
                # or equal to the next symbol 
                res = res + s1 
                i = i + 1
            else: 
  
                # Value of current symbol is greater 
                # or equal to the next symbol 
                res = res + s2 - s1 
                i = i + 2
        else: 
            res = res + s1 
            i = i + 1
  
    return res 
  
# Driver code 
print("Integer form of Roman Numeral is"), 
print(romanToDecimal("MCMIV")) 



7) https://www.geeksforgeeks.org/minimum-length-subarray-sum-greater-given-value/ - > Smallest subarray with sum greater than a given value
Given an array of integers and a number x, find the smallest subarray with sum greater than the given value.
Examples:
arr[] = {1, 4, 45, 6, 0, 19}
   x  =  51
Output: 3
Minimum length subarray is {4, 45, 6}

arr[] = {1, 10, 5, 2, 7}
   x  = 9
Output: 1
Minimum length subarray is {10}

arr[] = {1, 11, 100, 1, 0, 200, 3, 2, 1, 250}
    x = 280
Output: 4
Minimum length subarray is {100, 1, 0, 200}

arr[] = {1, 2, 4}
    x = 8
Output : Not Possible
Whole array sum is smaller than 8.


A simple solution is to use two nested loops. The outer loop picks a starting element, the inner 
loop considers all elements (on right side of current start) as ending element. Whenever sum of 
elements between current start and end becomes more than the given number,
update the result if current length is smaller than the smallest length so far.


Solution -> # O(n) solution for finding  
# smallest subarray with sum  
# greater than x 
  
# Returns length of smallest  
# subarray with sum greater  
# than x. If there is no  
# subarray with given sum,  
# then returns n+1 
def smallestSubWithSum(arr, n, x): 
  
    # Initialize current  
    # sum and minimum length 
    curr_sum = 0; 
    min_len = n + 1; 
  
    # Initialize starting  
    # and ending indexes 
    start = 0;  
    end = 0; 
    while (end < n): 
          
        # Keep adding array  
        # elements while 
        # current sum is  
        # smaller than x 
        while (curr_sum <= x and end < n): 
          
            # Ignore subarrays with  
            # negative sum if x is 
            # positive. 
            if (curr_sum <= 0 and x > 0): 
                start = end; 
                curr_sum = 0; 
  
            curr_sum += arr[end]; 
            end += 1; 
  
        # If current sum  
        # becomes greater than x. 
        while (curr_sum > x and start < n): 
            # Update minimum 
            # length if needed 
            if (end - start < min_len): 
                min_len = end - start; 
  
            # remove starting elements 
            curr_sum -= arr[start]; 
            start += 1; 
              
    return min_len; 
  
# Driver Code 
arr1 = [- 8, 1, 4, 2, -6]; 
x = 6; 
n1 = len(arr1); 
res1 = smallestSubWithSum(arr1, n1, x); 
if(res1 == n1 + 1): 
    print("Not possible"); 
else: 
    print(res1); 
	
	
8)https://www.geeksforgeeks.org/largest-sum-subarray-least-k-numbers/ -> Largest sum subarray with at-least k numbers
Given an array, find the subarray (containing at least k numbers) which has the largest sum.

Examples:

Input : arr[] = {-4, -2, 1, -3} 
            k = 2
Output : -1
The sub array is {-2, 1}

Input : arr[] = {1, 1, 1, 1, 1, 1} 
            k = 2
Output : 6 
The sub array is {1, 1, 1, 1, 1, 1}



This problem is an extension of Largest Sum Subarray Problem.

1) We first compute maximum sum till every index and store it in an array maxSum[].
2) After filling the array, we use the sliding window concept of size k. Keep track of sum of current k elements. 
To compute sum of current window, remove first element of previous window and add current element. After getting the
 sum of current window, we add the maxSum 
of the previous window, if it is greater than current max, then update it else not.


Solution ->  # Python3 program to find largest subarray  
# sum with at-least k elements in it. 
  
# Returns maximum sum of a subarray 
#  with at-least k elements. 
def maxSumWithK(a, n, k): 
   
    # maxSum[i] is going to store  
    # maximum sum till index i such 
    # that a[i] is part of the sum. 
    maxSum = [0 for i in range(n)] 
    maxSum[0] = a[0] 
  
    # We use Kadane's algorithm to fill maxSum[] 
    # Below code is taken from method3 of 
    # https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/ 
    curr_max = a[0] 
    for i in range(1, n): 
      
        curr_max = max(a[i], curr_max + a[i]) 
        maxSum[i] = curr_max 
  
    # Sum of first k elements 
    sum = 0
    for i in range(k): 
        sum += a[i] 
  
    # Use the concept of sliding window 
    result = sum
    for i in range(k, n): 
      
        # Compute sum of k elements  
        # ending with a[i]. 
        sum = sum + a[i] - a[i-k] 
  
        # Update result if required 
        result = max(result, sum) 
  
        # Include maximum sum till [i-k] also 
        # if it increases overall max. 
        result = max(result, sum + maxSum[i-k]) 
      
    return result 
  
# Driver code 
a = [1, 2, 3, -10, -3] 
k = 4
n = len(a) 
print(maxSumWithK(a, n, k)) 
  
# This code is contributed by Anant Agarwal. 

Output:
-4
Time Complexity: O(n)


9)https://www.geeksforgeeks.org/convert-ternary-expression-binary-tree/ -> Convert Ternary Expression to a Binary Tree
Given a string that contains ternary expressions. The expressions may be nested, task is convert the given ternary expression to a binary Tree.

Examples:

Input :  string expression =   a?b:c 
Output :        a
              /  \
             b    c

Input : expression =  a?b?c:d:e
Output :     a
           /  \
          b    e
        /  \
       c    d
	   
	   
Idea is that we traverse a string make first character as root and do following step recursively .
1. If we see Symbol ‘?’
…….. then we add next character as the left child of root.
2. If we see Symbol ‘:’
…….. then we add it as the right child of current root.
do this process until we traverse all element of “String”.


# Class to define a node  
# structure of the tree 
class Node: 
    def __init__(self, key): 
        self.data = key 
        self.left = None
        self.right = None
  
# Function to convert ternary  
# expression to a Binary tree 
# It returns the root node  
# of the tree 
def convert_expression(expression, i): 
    if i >= len(expression): 
        return None
  
    # Create a new node object 
    # for the expression at 
    # ith index 
    root = Node(expression[i]) 
  
    i += 1
  
    # if current character of  
    # ternary expression is '?' 
    # then we add next character  
    # as a left child of 
    # current node 
    if (i < len(expression) and 
                expression[i] is "?"): 
        root.left = convert_expression(expression, i + 1) 
          
    # else we have to add it  
    # as a right child of 
    # current node expression[0] == ':' 
    elif i < len(expression): 
        root.right = convert_expression(expression, i + 1) 
    return root 
  
# Function to print the tree 
# in a pre-order traversal pattern 
def print_tree(root): 
    if not root: 
        return
    print(root.data, end=' ') 
    print_tree(root.left) 
    print_tree(root.right) 
  
# Driver Code 
if __name__ == "__main__": 
    string_expression = "a?b?c:d:e"
    root_node = convert_expression(string_expression, 0) 
    print_tree(root_node) 
  
  
10) https://www.geeksforgeeks.org/find-triplets-array-whose-sum-equal-zero/  -> question asked in google sum of triplet = 0(refer google interview folder)

11) https://www.geeksforgeeks.org/find-minimum-depth-of-a-binary-tree/ - >  
Find Minimum Depth of a Binary Tree
Given a binary tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from root node down to the nearest leaf node.

For example, minimum height of below Binary Tree is 2.
Example Tree

Note that the path must end on a leaf node. For example, minimum height of below Binary Tree is also 2.

          10
        /    
      5  
	  
	  
	  The idea is to traverse the given Binary Tree. For every node, check if it is a leaf node. 
	  If yes, then return 1. If not leaf node then if left subtree is NULL, then recur for right 
	  subtree. And if right subtree is NULL,
	  then recur for left subtree. If both left and right subtrees are not NULL,
	  then take the minimum of two heights.
	  


Solution ->  # Python program to find minimum depth of a given Binary Tree 
  
# Tree node 
class Node: 
    def __init__(self , key): 
        self.data = key  
        self.left = None
        self.right = None
  
def minDepth(root): 
    # Corner Case.Should never be hit unless the code is  
    # called on root = NULL 
    if root is None: 
        return 0 
      
    # Base Case : Leaf node.This acoounts for height = 1 
    if root.left is None and root.right is None: 
        return 1
      
    # If left subtree is Null, recur for right subtree 
    if root.left is None: 
        return minDepth(root.right)+1
      
    # If right subtree is Null , recur for left subtree 
    if root.right is None: 
        return minDepth(root.left) +1 
      
    return min(minDepth(root.left), minDepth(root.right))+1
  
# Driver Program  
root = Node(1) 
root.left = Node(2) 
root.right = Node(3) 
root.left.left = Node(4) 
root.left.right = Node(5) 
print minDepth(root) 



12) https://www.geeksforgeeks.org/converting-decimal-number-lying-between-1-to-3999-to-roman-numerals/ -> perm_identity
Converting Decimal Number lying between 1 to 3999 to Roman Numerals
Given a number, find its corresponding Roman numeral.
Examples:

Input : 9
Output : IX

Input : 40
Output : XL

Input :  1904
Output : MCMIV
Following is the list of Roman symbols which include subtractive cases also:

SYMBOL       VALUE
I             1
IV            4
V             5
IX            9
X             10
XL            40
L             50
XC            90
C             100
CD            400
D             500
CM            900 
M             1000       


 
Idea is to convert the units, tens, hundreds, and thousands places of the given number separately. If the digit is 0, then there’s no corresponding Roman numeral symbol. The conversion of digit’s 4’s and 9’s are little bit different from other digits because these digits follows subtractive notation.

Algorithm to convert decimal number to Roman Numeral
Compare given number with base values in the order 1000, 900, 500, 400, 50, 40, 10, 9, 5, 4, 1. Base value which is just smaller or equal to the given number will be the initial base value (largest base value) .Divide the number by its largest base value, the corresponding base symbol will be repeated quotient times, the remainder will then become the number for future division and repetitions.The process will be repeated until the number becomes zero.

Example to demonstrate above algorithm:

Convert 3549 to its Roman Numerals
Output:



 

MMMDXLIX
Explanation:

Step 1
Initially number = 3549
Since 3549 >= 1000 ; largest base value will be 1000 initially.
Divide 3549/1000. Quotient = 3, Remainder =549. The corresponding symbol M will be repeated thrice.
Step 2

Now, number = 549
1000 > 549 >= 500 ; largest base value will be 500.
Divide 549/500. Quotient = 1, Remainder =49. The corresponding symbol D will be repeated once.
Step 3

Now, number = 49
50 > 49 >= 40 ; largest base value is 40.
Divide 49/40. Quotient = 1, Remainder = 9. The corresponding symbol XL will be repeated once.
Step 4

Now, number = 9
10> 9 >= 9 ; largest base value is 9.
Divide 9/9. Quotient = 1, Remainder = 0. The corresponding symbol IX will be repeated once.
Step 5

Finally number becomes 0, algorithm stops here.
Output obtained MMMDXLIX.


Solution - > # Python 3 program to convert Decimal 
# number to Roman numbers. 
import math 
  
def integerToRoman(A): 
    romansDict = \ 
        { 
            1: "I", 
            5: "V", 
            10: "X", 
            50: "L", 
            100: "C", 
            500: "D", 
            1000: "M", 
            5000: "G", 
            10000: "H"
        } 
  
    div = 1
    while A >= div: 
        div *= 10
  
    div /= 10
  
    res = "" 
  
    while A: 
  
        # main significant digit extracted 
        # into lastNum  
        lastNum = int(A / div) 
  
        if lastNum <= 3: 
            res += (romansDict[div] * lastNum) 
        elif lastNum == 4: 
            res += (romansDict[div] + 
                          romansDict[div * 5]) 
        elif 5 <= lastNum <= 8: 
            res += (romansDict[div * 5] + 
            (romansDict[div] * (lastNum - 5))) 
        elif lastNum == 9: 
            res += (romansDict[div] +
                         romansDict[div * 10]) 
  
        A = math.floor(A % div) 
        div /= 10
          
    return res 
  
# Driver code 
print("Roman Numeral of Integer is:" 
                   + str(integerToRoman(3549))) 

Output:
Roman Numeral of Integer is MMMDCXLIX


13)https://www.geeksforgeeks.org/find-if-string-is-k-palindrome-or-not-set-2/ -> Find if string is K-Palindrome or not | Set 2
Given a string, find out if the string is K-Palindrome or not. A K-palindrome string transforms into a palindrome on removing at most k characters from it.

Examples:

Input : String - abcdecba, k = 1
Output : Yes
String can become palindrome by removing
1 character i.e. either d or e

Input  : String - abcdeca, K = 2
Output : Yes
Can become palindrome by removing
2 characters b and e (or b and d).

Input : String - acdcb, K = 1
Output : No
String can not become palindrome by
removing only one character.
Recommended: Please solve it on “PRACTICE” first, before moving on to the solution.


 

We have discussed a DP solution in previous post where we saw that the problem is basically a 
variation of Edit Distance problem. In this post, another interesting DP solution is discussed.

The idea is to find the longest palindromic subsequence of the given string. If the difference
 between longest palindromic subsequence and the original string is less than equal to k, then 
 the string is k-palindrome else it is not k-palindrome.

For example, longest palindromic subsequence of string abcdeca is acdca(or aceca). 
The characters which do not contribute to longest palindromic subsequence of the string
 should be removed in order to make the string palindrome. So on removing b and d (or e) from abcdeca, string will transform into a palindrome.


 
Longest palindromic subsequence of a string can easily be found using LCS. Following is
 the two step solution for finding longest palindromic subsequence that uses LCS.

Reverse the given sequence and store the reverse in another array say rev[0..n-1]
LCS of the given sequence and rev[] will be the longest palindromic sequence.


Solution - > # Python program to find 
# if given string is K-Palindrome 
# or not 
  
# Returns length of LCS 
# for X[0..m-1], Y[0..n-1]  
def lcs(X, Y, m, n ): 
  
    L = [[0]*(n+1) for _ in range(m+1)] 
  
    # Following steps build 
        # L[m+1][n+1] in bottom up 
        # fashion. Note that L[i][j] 
        # contains length of 
    # LCS of X[0..i-1] and Y[0..j-1]  
    for i in range(m+1): 
        for j in range(n+1): 
            if not i or not j: 
                L[i][j] = 0
            elif X[i - 1] == Y[j - 1]: 
                L[i][j] = L[i - 1][j - 1] + 1
            else: 
                L[i][j] = max(L[i - 1][j], L[i][j - 1]) 
  
    # L[m][n] contains length 
        # of LCS for X and Y 
    return L[m][n] 
  
# find if given string is 
# K-Palindrome or not 
def isKPal(string, k): 
  
    n = len(string) 
  
    # Find reverse of string 
    revStr = string[::-1] 
  
    # find longest palindromic 
        # subsequence of 
    # given string 
    lps = lcs(string, revStr, n, n) 
  
    # If the difference between 
        # longest palindromic 
    # subsequence and the original 
        # string is less 
    # than equal to k, then 
        # the string is k-palindrome 
    return (n - lps <= k) 
  
# Driver program 
string = "abcdeca"
k = 2
  
print("Yes" if isKPal(string, k) else "No") 
 
Output:
Yes
Time complexity of above solution is O(n2).
Auxiliary space used by the program is O(n2). It can further be reduced to O(n) by using Space Optimized Solution of LCS.



14)https://www.geeksforgeeks.org/rearrange-a-string-in-sorted-order-followed-by-the-integer-sum/ -> Rearrange a string in sorted order 
followed by the integer sum
Given a string containing uppercase alphabets and integer digits (from 0 to 9), the task is to print the alphabets in 
the order followed by the sum of digits.

Examples:

Input : AC2BEW3
Output : ABCEW5
Alphabets in the lexicographic order 
followed by the sum of integers(2 and 3).
Recommended: Please solve it on “PRACTICE ” first, before moving on to the solution.
Implementation:
1- Start traversing the given string.
   a) If an alphabet comes increment its
      occurrence count into a hash_table.
   b) If an integer comes then store it 
      separately by summing up everytime.
2- Using hash_table append all the 
   characters first into a string and 
   then at the end, append the integers 
   sum.
3- Return the resultant string.



Solution - > // Java program for above implementation 
  
class Test 
{ 
    static final int MAX_CHAR = 26; 
      
    // Method to return string in lexicographic 
    // order followed by integers sum 
    static String arrangeString(String str) 
    { 
        int char_count[] = new int[MAX_CHAR]; 
        int sum = 0; 
       
        // Traverse the string 
        for (int i = 0; i < str.length(); i++) 
        { 
            // Count occurrence of uppercase alphabets 
            if (Character.isUpperCase(str.charAt(i))) 
                char_count[str.charAt(i)-'A']++; 
       
            //Store sum of integers 
            else
                sum = sum + (str.charAt(i)-'0'); 
              
        } 
       
        String res = ""; 
       
        // Traverse for all characters A to Z 
        for (int i = 0; i < MAX_CHAR; i++) 
        { 
            char ch = (char)('A'+i); 
       
            // Append the current character 
            // in the string no. of times it 
            //  occurs in the given string 
            while (char_count[i]-- != 0) 
                res = res + ch; 
        } 
       
        // Append the sum of integers 
        if (sum > 0) 
            res = res + sum; 
       
        // return resultant string 
        return res; 
    } 
      
    // Driver method 
    public static void main(String args[])  
    { 
        String str = "ACCBA10D2EW30"; 
        System.out.println(arrangeString(str)); 
    } 
} 

Output:
AABCCDEW6
Time Complexity: O(n)



 

Reference : 
https://www.careercup.com/question?id=13382661




