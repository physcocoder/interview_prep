1) https://www.geeksforgeeks.org/amazon-interview-set-33-2/   -> 1) Given a singly linked list, swap every 2 nodes, for odd number of input; retain the last node as it is.
Eg: Input: 5 13 15 18 20 11 6 7
Output: 13 5 18 15 11 20 7 6


solution  -> not found


2)https://www.geeksforgeeks.org/amazon-interview-set-33-2/  -> 2) Given a binary tree, find the number of pairs where sum of 2 nodes’ values equal to k
Eg:

 1
2 3
4 5 7 
Say k=7, output =2 ( 2+5, 3+4)


solution -> not given



3)https://www.geeksforgeeks.org/amazon-interview-set-33-2/  -> Given a n (large number) lists of customers who visited n webpages on n (large number)
days, design a data structure to get customers who have visited the website on exactly “k” days and should have visited at least “m” distinct pages altogether.
Was then asked to improvise the solution as much as possible


solution -> ---


4)https://www.geeksforgeeks.org/amazon-interview-set-33-2/   ->  Least common ancestor of a binary tree (Solution and Code)

solution not given


5)https://www.geeksforgeeks.org/amazon-interview-set-33-2/  -> Print binary tree in zig-zag order..
solution - not given

6) https://www.geeksforgeeks.org/amazon-interview-set-22/  ->  Given a binary search tree. Find two numbers in the tree whose sum is k. If there are no 
such elements, state so. Assume that the tree is balanced.
O(n) solution with O(logn) space was expected. Solved using two stacks. Code was required.

solution -> not given

7)https://www.geeksforgeeks.org/amazon-interview-set-22/ -> Copy a linked list with next and random pointer. 
Not allowed to modify the given list at any time. Only read privilege on the given list.

solution  not given

8)https://www.geeksforgeeks.org/amazon-interview-set-22/ -> Given a binary tree with parent pointer only. Given pointers to two nodes in the tree, find the LCS(Least Common Ancestor). 
       Quality Code was required with proper handling of boundary cases.
	   
 solution not given
 
9)https://www.geeksforgeeks.org/amazon-interview-experience-sde-ll/ -> Print left the view of a binary tree.

solution not given

10)https://www.geeksforgeeks.org/amazon-interview-experience-for-experienced/ -> Given a linked list, you have to reverse k alternate nodes.

solution ->     class LinkedList { 
  
    static Node head; 
  
    class Node { 
  
        int data; 
        Node next; 
  
        Node(int d) { 
            data = d; 
            next = null; 
        } 
    } 
  
    /* Reverses alternate k nodes and 
     returns the pointer to the new head node */
    Node kAltReverse(Node node, int k) { 
        Node current = node; 
        Node next = null, prev = null; 
        int count = 0; 
  
        /*1) reverse first k nodes of the linked list */
        while (current != null && count < k) { 
            next = current.next; 
            current.next = prev; 
            prev = current; 
            current = next; 
            count++; 
        } 
  
        /* 2) Now head points to the kth node.  So change next  
         of head to (k+1)th node*/
        if (node != null) { 
            node.next = current; 
        } 
  
        /* 3) We do not want to reverse next k nodes. So move the current  
         pointer to skip next k nodes */
        count = 0; 
        while (count < k - 1 && current != null) { 
            current = current.next; 
            count++; 
        } 
  
        /* 4) Recursively call for the list starting from current->next. 
         And make rest of the list as next of first node */
        if (current != null) { 
            current.next = kAltReverse(current.next, k); 
        } 
  
        /* 5) prev is new head of the input list */
        return prev; 
    } 
  
    void printList(Node node) { 
        while (node != null) { 
            System.out.print(node.data + " "); 
            node = node.next; 
        } 
    } 
  
    void push(int newdata) { 
        Node mynode = new Node(newdata); 
        mynode.next = head; 
        head = mynode; 
    } 
  
    public static void main(String[] args) { 
        LinkedList list = new LinkedList(); 
  
        // Creating the linkedlist 
        for (int i = 20; i > 0; i--) { 
            list.push(i); 
        } 
        System.out.println("Given Linked List :"); 
        list.printList(head); 
        head = list.kAltReverse(head, 3); 
        System.out.println(""); 
        System.out.println("Modified Linked List :"); 
        list.printList(head); 
  
    } 
} 




11) https://www.geeksforgeeks.org/amazon-interview-experience-set-294-experienced/ -> Design a DS where below operation is performed in O(1) time.
Insert
Delete
Search
GetRandom


solution not given


12)https://www.geeksforgeeks.org/find-level-maximum-sum-binary-tree/ -> Given a Binary Tree having positive and negative nodes,
 the task is to find maximum sum level in it.
 Input :               4
                    /   \
                   2    -5
                  / \    /\
                -1   3 -2  6
Output: 6
Explanation :
Sum of all nodes of 0'th level is 4
Sum of all nodes of 1'th level is -3
Sum of all nodes of 0'th level is 6
Hence maximum sum is 6

Input :          1
               /   \
             2      3
           /  \      \
          4    5      8
                    /   \
                   6     7  
Output :  17


13)https://www.geeksforgeeks.org/amazon-interview-experience-set-245-for-2-5-years/ -> Q-3 Given a BST, I needed to serialize it and deserialize it. 
	This essentially boiled down to generating the 
	“traversal” string and getting the BST back from the traversal.
	
solution -> not given

14) https://www.geeksforgeeks.org/amazon-interview-experience-set-245-for-2-5-years/ -> There are two linked lists. Both linked lists have a single-digit number in their nodes. I needed to
treat this linked lists as a numbers and add them up and store the digits in a new linked list.
E.g., head -> 5 -> 6 -> 7-> 9
head -> 2-> 1 -> 1
Resultant linked list: head-> 5 -> 8-> 9-> 0 (5679 + 211 = 5890)


15)https://www.geeksforgeeks.org/amazon-interview-experience-set-347-1-8-years-experienced-sde1/ ->  Check if Linked list contains loop.


solution -> This I can solve. will solve after completion of the task given by sir



16)https://www.interviewbit.com/problems/unique-binary-search-trees-ii/ -> Given A, how many structurally unique BST’s (binary search trees) that store values 1...A?

Example :

Given A = 3, there are a total of 5 unique BST’s.


   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   
   
 Solution - not given
 
 
17)https://www.interviewbit.com/problems/swap-list-nodes-in-pairs/ - > Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

Solution - not given



18)https://www.interviewbit.com/problems/reorder-list/ - >  Given a singly linked list

    L: L0 → L1 → … → Ln-1 → Ln,
reorder it to:

    L0 → Ln → L1 → Ln-1 → L2 → Ln-2 → …
You must do this in-place without altering the nodes’ values.

For example,
Given {1,2,3,4}, reorder it to {1,4,2,3}


Solution -> not given


19) https://www.interviewbit.com/problems/merge-two-sorted-lists/ - >  Merge two sorted linked lists and return it as a new list. 
The new list should be made by splicing together the nodes of the first two lists, and should also be sorted.

For example, given following linked lists :

  5 -> 8 -> 20 
  4 -> 11 -> 15
The merged list should be :

4 -> 5 -> 8 -> 11 -> 15 -> 20


Solution -> not given

20)https://www.interviewbit.com/problems/add-two-numbers-as-lists/ - >  You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

    342 + 465 = 807
Make sure there are no trailing zeros in the output list
So, 7 -> 0 -> 8 -> 0 is not a valid response even though the value is still 807.

